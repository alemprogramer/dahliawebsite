/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface ComptrollerV1Storage extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ComptrollerV1Storage;
  clone(): ComptrollerV1Storage;
  methods: {
    _borrowGuardianPaused(): NonPayableTransactionObject<boolean>;

    _mintGuardianPaused(): NonPayableTransactionObject<boolean>;

    accountAssets(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    admin(): NonPayableTransactionObject<string>;

    allMarkets(arg0: number | string | BN): NonPayableTransactionObject<string>;

    borrowGuardianPaused(arg0: string): NonPayableTransactionObject<boolean>;

    comptrollerImplementation(): NonPayableTransactionObject<string>;

    creditLimits(arg0: string): NonPayableTransactionObject<boolean>;

    markets(arg0: string): NonPayableTransactionObject<boolean>;

    mintGuardianPaused(arg0: string): NonPayableTransactionObject<boolean>;

    pauseGuardian(): NonPayableTransactionObject<string>;

    pendingAdmin(): NonPayableTransactionObject<string>;

    pendingComptrollerImplementation(): NonPayableTransactionObject<string>;

    transferGuardianPaused(): NonPayableTransactionObject<boolean>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
