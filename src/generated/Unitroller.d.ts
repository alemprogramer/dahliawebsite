/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Failure = ContractEventLog<{
  error: string;
  info: string;
  detail: string;
  0: string;
  1: string;
  2: string;
}>;
export type NewAdmin = ContractEventLog<{
  oldAdmin: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type NewImplementation = ContractEventLog<{
  oldImplementation: string;
  newImplementation: string;
  0: string;
  1: string;
}>;
export type NewPendingAdmin = ContractEventLog<{
  oldPendingAdmin: string;
  newPendingAdmin: string;
  0: string;
  1: string;
}>;
export type NewPendingImplementation = ContractEventLog<{
  oldPendingImplementation: string;
  newPendingImplementation: string;
  0: string;
  1: string;
}>;

export interface Unitroller extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Unitroller;
  clone(): Unitroller;
  methods: {
    _acceptAdmin(): NonPayableTransactionObject<string>;

    _acceptImplementation(): NonPayableTransactionObject<string>;

    _setPendingAdmin(
      newPendingAdmin: string
    ): NonPayableTransactionObject<string>;

    _setPendingImplementation(
      newPendingImplementation: string
    ): NonPayableTransactionObject<string>;

    admin(): NonPayableTransactionObject<string>;

    comptrollerImplementation(): NonPayableTransactionObject<string>;

    pendingAdmin(): NonPayableTransactionObject<string>;

    pendingComptrollerImplementation(): NonPayableTransactionObject<string>;
  };
  events: {
    Failure(cb?: Callback<Failure>): EventEmitter;
    Failure(options?: EventOptions, cb?: Callback<Failure>): EventEmitter;

    NewAdmin(cb?: Callback<NewAdmin>): EventEmitter;
    NewAdmin(options?: EventOptions, cb?: Callback<NewAdmin>): EventEmitter;

    NewImplementation(cb?: Callback<NewImplementation>): EventEmitter;
    NewImplementation(
      options?: EventOptions,
      cb?: Callback<NewImplementation>
    ): EventEmitter;

    NewPendingAdmin(cb?: Callback<NewPendingAdmin>): EventEmitter;
    NewPendingAdmin(
      options?: EventOptions,
      cb?: Callback<NewPendingAdmin>
    ): EventEmitter;

    NewPendingImplementation(
      cb?: Callback<NewPendingImplementation>
    ): EventEmitter;
    NewPendingImplementation(
      options?: EventOptions,
      cb?: Callback<NewPendingImplementation>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Failure", cb: Callback<Failure>): void;
  once(event: "Failure", options: EventOptions, cb: Callback<Failure>): void;

  once(event: "NewAdmin", cb: Callback<NewAdmin>): void;
  once(event: "NewAdmin", options: EventOptions, cb: Callback<NewAdmin>): void;

  once(event: "NewImplementation", cb: Callback<NewImplementation>): void;
  once(
    event: "NewImplementation",
    options: EventOptions,
    cb: Callback<NewImplementation>
  ): void;

  once(event: "NewPendingAdmin", cb: Callback<NewPendingAdmin>): void;
  once(
    event: "NewPendingAdmin",
    options: EventOptions,
    cb: Callback<NewPendingAdmin>
  ): void;

  once(
    event: "NewPendingImplementation",
    cb: Callback<NewPendingImplementation>
  ): void;
  once(
    event: "NewPendingImplementation",
    options: EventOptions,
    cb: Callback<NewPendingImplementation>
  ): void;
}
