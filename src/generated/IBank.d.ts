/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AddBank = ContractEventLog<{
  token: string;
  cToken: string;
  0: string;
  1: string;
}>;
export type Borrow = ContractEventLog<{
  positionId: string;
  caller: string;
  token: string;
  amount: string;
  share: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Liquidate = ContractEventLog<{
  positionId: string;
  liquidator: string;
  debtToken: string;
  amount: string;
  share: string;
  bounty: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type PutCollateral = ContractEventLog<{
  positionId: string;
  caller: string;
  token: string;
  id: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Repay = ContractEventLog<{
  positionId: string;
  caller: string;
  token: string;
  amount: string;
  share: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type SetFeeBps = ContractEventLog<{
  feeBps: string;
  0: string;
}>;
export type SetOracle = ContractEventLog<{
  oracle: string;
  0: string;
}>;
export type TakeCollateral = ContractEventLog<{
  positionId: string;
  caller: string;
  token: string;
  id: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type WithdrawReserve = ContractEventLog<{
  user: string;
  token: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface IBank extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IBank;
  clone(): IBank;
  methods: {
    EXECUTOR(): NonPayableTransactionObject<string>;

    POSITION_ID(): NonPayableTransactionObject<string>;

    SPELL(): NonPayableTransactionObject<string>;

    accrue(token: string): NonPayableTransactionObject<void>;

    borrow(
      token: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    borrowBalanceCurrent(
      positionId: number | string | BN,
      token: string
    ): NonPayableTransactionObject<string>;

    borrowBalanceStored(
      positionId: number | string | BN,
      token: string
    ): NonPayableTransactionObject<string>;

    getBankInfo(token: string): NonPayableTransactionObject<{
      isListed: boolean;
      cToken: string;
      reserve: string;
      totalDebt: string;
      totalShare: string;
      0: boolean;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    getBorrowETHValue(
      positionId: number | string | BN
    ): NonPayableTransactionObject<string>;

    getCurrentPositionInfo(): NonPayableTransactionObject<{
      owner: string;
      collToken: string;
      collId: string;
      collateralSize: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    getPositionInfo(
      positionId: number | string | BN
    ): NonPayableTransactionObject<{
      owner: string;
      collToken: string;
      collId: string;
      collateralSize: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    liquidate(
      positionId: number | string | BN,
      debtToken: string,
      amountCall: number | string | BN
    ): NonPayableTransactionObject<void>;

    nextPositionId(): NonPayableTransactionObject<string>;

    putCollateral(
      collToken: string,
      collId: number | string | BN,
      amountCall: number | string | BN
    ): NonPayableTransactionObject<void>;

    repay(
      token: string,
      amountCall: number | string | BN
    ): NonPayableTransactionObject<void>;

    support(token: string): NonPayableTransactionObject<boolean>;

    takeCollateral(
      collToken: string,
      collId: number | string | BN,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    transmit(
      token: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AddBank(cb?: Callback<AddBank>): EventEmitter;
    AddBank(options?: EventOptions, cb?: Callback<AddBank>): EventEmitter;

    Borrow(cb?: Callback<Borrow>): EventEmitter;
    Borrow(options?: EventOptions, cb?: Callback<Borrow>): EventEmitter;

    Liquidate(cb?: Callback<Liquidate>): EventEmitter;
    Liquidate(options?: EventOptions, cb?: Callback<Liquidate>): EventEmitter;

    PutCollateral(cb?: Callback<PutCollateral>): EventEmitter;
    PutCollateral(
      options?: EventOptions,
      cb?: Callback<PutCollateral>
    ): EventEmitter;

    Repay(cb?: Callback<Repay>): EventEmitter;
    Repay(options?: EventOptions, cb?: Callback<Repay>): EventEmitter;

    SetFeeBps(cb?: Callback<SetFeeBps>): EventEmitter;
    SetFeeBps(options?: EventOptions, cb?: Callback<SetFeeBps>): EventEmitter;

    SetOracle(cb?: Callback<SetOracle>): EventEmitter;
    SetOracle(options?: EventOptions, cb?: Callback<SetOracle>): EventEmitter;

    TakeCollateral(cb?: Callback<TakeCollateral>): EventEmitter;
    TakeCollateral(
      options?: EventOptions,
      cb?: Callback<TakeCollateral>
    ): EventEmitter;

    WithdrawReserve(cb?: Callback<WithdrawReserve>): EventEmitter;
    WithdrawReserve(
      options?: EventOptions,
      cb?: Callback<WithdrawReserve>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AddBank", cb: Callback<AddBank>): void;
  once(event: "AddBank", options: EventOptions, cb: Callback<AddBank>): void;

  once(event: "Borrow", cb: Callback<Borrow>): void;
  once(event: "Borrow", options: EventOptions, cb: Callback<Borrow>): void;

  once(event: "Liquidate", cb: Callback<Liquidate>): void;
  once(
    event: "Liquidate",
    options: EventOptions,
    cb: Callback<Liquidate>
  ): void;

  once(event: "PutCollateral", cb: Callback<PutCollateral>): void;
  once(
    event: "PutCollateral",
    options: EventOptions,
    cb: Callback<PutCollateral>
  ): void;

  once(event: "Repay", cb: Callback<Repay>): void;
  once(event: "Repay", options: EventOptions, cb: Callback<Repay>): void;

  once(event: "SetFeeBps", cb: Callback<SetFeeBps>): void;
  once(
    event: "SetFeeBps",
    options: EventOptions,
    cb: Callback<SetFeeBps>
  ): void;

  once(event: "SetOracle", cb: Callback<SetOracle>): void;
  once(
    event: "SetOracle",
    options: EventOptions,
    cb: Callback<SetOracle>
  ): void;

  once(event: "TakeCollateral", cb: Callback<TakeCollateral>): void;
  once(
    event: "TakeCollateral",
    options: EventOptions,
    cb: Callback<TakeCollateral>
  ): void;

  once(event: "WithdrawReserve", cb: Callback<WithdrawReserve>): void;
  once(
    event: "WithdrawReserve",
    options: EventOptions,
    cb: Callback<WithdrawReserve>
  ): void;
}
