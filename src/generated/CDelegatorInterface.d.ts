/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewImplementation = ContractEventLog<{
  oldImplementation: string;
  newImplementation: string;
  0: string;
  1: string;
}>;

export interface CDelegatorInterface extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CDelegatorInterface;
  clone(): CDelegatorInterface;
  methods: {
    _setImplementation(
      implementation_: string,
      allowResign: boolean,
      becomeImplementationData: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    NewImplementation(cb?: Callback<NewImplementation>): EventEmitter;
    NewImplementation(
      options?: EventOptions,
      cb?: Callback<NewImplementation>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewImplementation", cb: Callback<NewImplementation>): void;
  once(
    event: "NewImplementation",
    options: EventOptions,
    cb: Callback<NewImplementation>
  ): void;
}
