/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AcceptGovernor = ContractEventLog<{
  governor: string;
  0: string;
}>;
export type SetGovernor = ContractEventLog<{
  governor: string;
  0: string;
}>;
export type SetPendingGovernor = ContractEventLog<{
  pendingGovernor: string;
  0: string;
}>;

export interface WhitelistSpell extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): WhitelistSpell;
  clone(): WhitelistSpell;
  methods: {
    acceptGovernor(): NonPayableTransactionObject<void>;

    approved(arg0: string, arg1: string): NonPayableTransactionObject<boolean>;

    bank(): NonPayableTransactionObject<string>;

    governor(): NonPayableTransactionObject<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: (number | string | BN)[],
      arg3: (number | string | BN)[],
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: number | string | BN,
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    pendingGovernor(): NonPayableTransactionObject<string>;

    setPendingGovernor(
      _pendingGovernor: string
    ): NonPayableTransactionObject<void>;

    setWhitelistLPTokens(
      lpTokens: string[],
      statuses: boolean[]
    ): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    werc20(): NonPayableTransactionObject<string>;

    whitelistedLpTokens(arg0: string): NonPayableTransactionObject<boolean>;
  };
  events: {
    AcceptGovernor(cb?: Callback<AcceptGovernor>): EventEmitter;
    AcceptGovernor(
      options?: EventOptions,
      cb?: Callback<AcceptGovernor>
    ): EventEmitter;

    SetGovernor(cb?: Callback<SetGovernor>): EventEmitter;
    SetGovernor(
      options?: EventOptions,
      cb?: Callback<SetGovernor>
    ): EventEmitter;

    SetPendingGovernor(cb?: Callback<SetPendingGovernor>): EventEmitter;
    SetPendingGovernor(
      options?: EventOptions,
      cb?: Callback<SetPendingGovernor>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AcceptGovernor", cb: Callback<AcceptGovernor>): void;
  once(
    event: "AcceptGovernor",
    options: EventOptions,
    cb: Callback<AcceptGovernor>
  ): void;

  once(event: "SetGovernor", cb: Callback<SetGovernor>): void;
  once(
    event: "SetGovernor",
    options: EventOptions,
    cb: Callback<SetGovernor>
  ): void;

  once(event: "SetPendingGovernor", cb: Callback<SetPendingGovernor>): void;
  once(
    event: "SetPendingGovernor",
    options: EventOptions,
    cb: Callback<SetPendingGovernor>
  ): void;
}
