/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type PairCreated = ContractEventLog<{
  token0: string;
  token1: string;
  pair: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface MockUniswapV2Factory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MockUniswapV2Factory;
  clone(): MockUniswapV2Factory;
  methods: {
    allPairs(arg0: number | string | BN): NonPayableTransactionObject<string>;

    allPairsLength(): NonPayableTransactionObject<string>;

    createPair(
      tokenA: string,
      tokenB: string
    ): NonPayableTransactionObject<string>;

    feeTo(): NonPayableTransactionObject<string>;

    feeToSetter(): NonPayableTransactionObject<string>;

    getPair(arg0: string, arg1: string): NonPayableTransactionObject<string>;

    setFeeTo(_feeTo: string): NonPayableTransactionObject<void>;

    setFeeToSetter(_feeToSetter: string): NonPayableTransactionObject<void>;
  };
  events: {
    PairCreated(cb?: Callback<PairCreated>): EventEmitter;
    PairCreated(
      options?: EventOptions,
      cb?: Callback<PairCreated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "PairCreated", cb: Callback<PairCreated>): void;
  once(
    event: "PairCreated",
    options: EventOptions,
    cb: Callback<PairCreated>
  ): void;
}
