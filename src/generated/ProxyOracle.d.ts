/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AcceptGovernor = ContractEventLog<{
  governor: string;
  0: string;
}>;
export type SetGovernor = ContractEventLog<{
  governor: string;
  0: string;
}>;
export type SetPendingGovernor = ContractEventLog<{
  pendingGovernor: string;
  0: string;
}>;
export type SetTokenFactor = ContractEventLog<{
  token: string;
  tokenFactor: [string, string, string];
  0: string;
  1: [string, string, string];
}>;
export type SetWhitelist = ContractEventLog<{
  token: string;
  ok: boolean;
  0: string;
  1: boolean;
}>;
export type UnsetTokenFactor = ContractEventLog<{
  token: string;
  0: string;
}>;

export interface ProxyOracle extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ProxyOracle;
  clone(): ProxyOracle;
  methods: {
    acceptGovernor(): NonPayableTransactionObject<void>;

    asETHBorrow(
      token: string,
      amount: number | string | BN,
      owner: string
    ): NonPayableTransactionObject<string>;

    asETHCollateral(
      token: string,
      id: number | string | BN,
      amount: number | string | BN,
      owner: string
    ): NonPayableTransactionObject<string>;

    convertForLiquidation(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: number | string | BN,
      amountIn: number | string | BN
    ): NonPayableTransactionObject<string>;

    governor(): NonPayableTransactionObject<string>;

    pendingGovernor(): NonPayableTransactionObject<string>;

    setPendingGovernor(
      _pendingGovernor: string
    ): NonPayableTransactionObject<void>;

    setTokenFactors(
      tokens: string[],
      _tokenFactors: [
        number | string | BN,
        number | string | BN,
        number | string | BN
      ][]
    ): NonPayableTransactionObject<void>;

    setWhitelistERC1155(
      tokens: string[],
      ok: boolean
    ): NonPayableTransactionObject<void>;

    source(): NonPayableTransactionObject<string>;

    support(token: string): NonPayableTransactionObject<boolean>;

    supportWrappedToken(
      token: string,
      id: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    tokenFactors(arg0: string): NonPayableTransactionObject<{
      borrowFactor: string;
      collateralFactor: string;
      liqIncentive: string;
      0: string;
      1: string;
      2: string;
    }>;

    unsetTokenFactors(tokens: string[]): NonPayableTransactionObject<void>;

    whitelistERC1155(arg0: string): NonPayableTransactionObject<boolean>;
  };
  events: {
    AcceptGovernor(cb?: Callback<AcceptGovernor>): EventEmitter;
    AcceptGovernor(
      options?: EventOptions,
      cb?: Callback<AcceptGovernor>
    ): EventEmitter;

    SetGovernor(cb?: Callback<SetGovernor>): EventEmitter;
    SetGovernor(
      options?: EventOptions,
      cb?: Callback<SetGovernor>
    ): EventEmitter;

    SetPendingGovernor(cb?: Callback<SetPendingGovernor>): EventEmitter;
    SetPendingGovernor(
      options?: EventOptions,
      cb?: Callback<SetPendingGovernor>
    ): EventEmitter;

    SetTokenFactor(cb?: Callback<SetTokenFactor>): EventEmitter;
    SetTokenFactor(
      options?: EventOptions,
      cb?: Callback<SetTokenFactor>
    ): EventEmitter;

    SetWhitelist(cb?: Callback<SetWhitelist>): EventEmitter;
    SetWhitelist(
      options?: EventOptions,
      cb?: Callback<SetWhitelist>
    ): EventEmitter;

    UnsetTokenFactor(cb?: Callback<UnsetTokenFactor>): EventEmitter;
    UnsetTokenFactor(
      options?: EventOptions,
      cb?: Callback<UnsetTokenFactor>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AcceptGovernor", cb: Callback<AcceptGovernor>): void;
  once(
    event: "AcceptGovernor",
    options: EventOptions,
    cb: Callback<AcceptGovernor>
  ): void;

  once(event: "SetGovernor", cb: Callback<SetGovernor>): void;
  once(
    event: "SetGovernor",
    options: EventOptions,
    cb: Callback<SetGovernor>
  ): void;

  once(event: "SetPendingGovernor", cb: Callback<SetPendingGovernor>): void;
  once(
    event: "SetPendingGovernor",
    options: EventOptions,
    cb: Callback<SetPendingGovernor>
  ): void;

  once(event: "SetTokenFactor", cb: Callback<SetTokenFactor>): void;
  once(
    event: "SetTokenFactor",
    options: EventOptions,
    cb: Callback<SetTokenFactor>
  ): void;

  once(event: "SetWhitelist", cb: Callback<SetWhitelist>): void;
  once(
    event: "SetWhitelist",
    options: EventOptions,
    cb: Callback<SetWhitelist>
  ): void;

  once(event: "UnsetTokenFactor", cb: Callback<UnsetTokenFactor>): void;
  once(
    event: "UnsetTokenFactor",
    options: EventOptions,
    cb: Callback<UnsetTokenFactor>
  ): void;
}
